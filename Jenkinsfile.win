pipeline{
    agent any
    stages{
        stage("Verifying Packages"){
            steps{
                script{
                    
                    List<String> changedFiles = changes_method()
                    List<String> changed_packages_list = []
                    List<String> ix_packages_list = []

                    println "printing changedFiles list"
                    println changedFiles
                    //List<String> changed_packages_list = []
                    //filter_package_names()



                    for (file_name in changedFiles){
                        if (file_name=="Jenkinsfile.win"){
                            println " completed if statement"
                            println "${file_name}"
                            continue
                        }
                        else{           
                            file_name = file_name.split("/")
                            def changed_package_name = file_name[3]
                            if (changed_package_name in changed_packages_list){
                                continue
                            }
                            else{
                                 if (changed_package_name=="IXAdminFramework" || changed_package_name=="DOECommon"){
                                    ix_packages_list.add(changed_package_name)
                                 }
                                 else{
                                    changed_packages_list.add(changed_package_name)
                                 }
                            }          
                                
                        }
                    }

                    def ix_packages_as_string = ix_packages_list.join('/')
                        
                    println changed_packages_list
                    println ix_packages_list
                    println ix_packages_as_string

                    if (fileExists("assets/IS/Packages/Packages_To_Deploy")){
                          println "inside file exixts function"
                        bat """ cd assets/IS/Packages
                        rmdir /s Packages_To_Deploy /Q """
                    }
                    println "file checking completed"
                    bat """
                    move project_specific.properties project.properties
                    cd assets/IS/Packages
                    mkdir Packages_To_Deploy
                    cd ../../../
                    """
                    println "directory created"
                    for(item in changed_packages_list){
                        if(item=="IXAdminFramework" || item=="DOECommon"){
                            bat """ move /y "assets\\IS\\Packages\\$item" "assets\\IS\\Packages\\Packages_To_Deploy\\$item" """
                        }
                        else{
                            bat """ xcopy assets\\IS\\Packages\\$item assets\\IS\\Packages\\Packages_To_Deploy\\$item  /e /i """
                        }
                        
                    }
                    println("files copies or moved")
                    stage("Building Packages"){
                        bat "${env.SAG_HOME}/common/lib/ant/bin/ant -DSAGHome=${env.SAG_HOME} -DSAG_CI_HOME=${env.SAG_CI_HOME} -DprojectName=${env.JOB_NAME} -buildfile build.xml build"
                    }
                    stage("Deploying Packages"){
                        bat "${env.SAG_HOME}/common/lib/ant/bin/ant -DSAGHome=${env.SAG_HOME} -DSAG_CI_HOME=${env.SAG_CI_HOME} -DprojectName=${env.JOB_NAME} -buildfile build.xml deploy"
                    }
                    bat """ cd assets/IS/Packages
                        rmdir /s Packages_To_Deploy /Q """

                }
            }
        }
    }
}

@NonCPS

List<String> changes_method(){
    println "called changes_method function"
    def changedFiles_2 = []
    def changeLogSets = currentBuild.changeSets
    for (entries in changeLogSets) {
        for (entry in entries) {
            for (file in entry.affectedFiles) {
                echo "Found changed file: ${file.path}"
                changedFiles_2 += "${file.path}"
             }
        }
    }
    print changedFiles_2
    return changedFiles_2
}
