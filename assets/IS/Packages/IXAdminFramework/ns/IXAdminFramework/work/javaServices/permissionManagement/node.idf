<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">Ci8vID09PT09PT09IERlbGV0ZSBQZXJtaXNzaW9uIEphdmEgU2VydmljZSAoVVRJTFMpID09PT09
PT09PT0gLy8KCnByaXZhdGUgc3RhdGljIEJvb2xlYW4gY2hlY2tJZlJlYWRUb0JlRGVsZXRlZChT
dHJpbmcgbW9kdWxlSWQsIFN0cmluZyByZWFkRmVhdHVyZUlkLCBTdHJpbmcgY3VycmVudFBlcm1p
c3Npb25JZCwgU3RyaW5nIHJvbGVJZCwgTGlzdDxIYXNoTWFwPFN0cmluZywgU3RyaW5nPj4gaW5w
dXRMaXN0TWFwKSB7CglCb29sZWFuIGlzRGVsZXRlID0gdHJ1ZTsKCWZvcihIYXNoTWFwPFN0cmlu
ZywgU3RyaW5nPiBpbnB1dFZhbHVlczogaW5wdXRMaXN0TWFwKSB7CgkJaWYoaW5wdXRWYWx1ZXMu
Z2V0KCJtb2R1bGVJZCIpLmVxdWFscyhtb2R1bGVJZCkgJiYgaW5wdXRWYWx1ZXMuZ2V0KCJyb2xl
SWQiKS5lcXVhbHMocm9sZUlkKQoJCQkJJiYgIWlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIiku
ZXF1YWxzKHJlYWRGZWF0dXJlSWQpICYmICFpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIp
LmVxdWFscyhjdXJyZW50UGVybWlzc2lvbklkKSkgewoJCQlpc0RlbGV0ZSA9IGZhbHNlOwoJCQly
ZXR1cm4gaXNEZWxldGU7CgkJfQoJfQoJcmV0dXJuIGlzRGVsZXRlOwp9CgovLyAqKioqIENoZWNr
aW5nIFBhcmVudCBNb2R1bGUgYW5kIHJlbW92aW5nIHNhbWUgZmVhdHVyZSBhbmQgUmVhZCBGZWF0
dXJlIGFzd2VsbCAoSWYgZXhpc3RzKSAqKioqIC8vCnByaXZhdGUgc3RhdGljIHZvaWQgY2hlY2tB
bmREZWxldGVQYXJlbnRNb2R1bGVzKExpc3Q8SGFzaE1hcDxTdHJpbmcsIFN0cmluZz4+IGlucHV0
TGlzdE1hcCxIYXNoTWFwPFN0cmluZywgU3RyaW5nPiBjdXJyZW50SW5wdXRWYWx1ZXMsCgkJU3Ry
aW5nIGZlYXR1cmVJZCwgU3RyaW5nIHJlYWRGZWF0dXJlSWQsIFN0cmluZyByb2xlSWQsIEFycmF5
TGlzdDxJRGF0YT4gZmluYWxWYWx1ZXMpIHsKCWZvcihIYXNoTWFwPFN0cmluZywgU3RyaW5nPiBp
bnB1dFZhbHVlczogaW5wdXRMaXN0TWFwKSB7CgkJaWYoaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1bGVJ
ZCIpLmVxdWFscyhjdXJyZW50SW5wdXRWYWx1ZXMuZ2V0KCJwYXJlbnRJZCIpKSkgewoJCQlpZihp
bnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpLmVxdWFscyhmZWF0dXJlSWQpKSB7CgkJCQlpZigh
Y2hlY2tJZkNoaWxkcmVuSGFzUGVybWlzc2lvbihpbnB1dFZhbHVlcy5nZXQoIm1vZHVsZUlkIiks
IGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIiksIHJvbGVJZCwgaW5wdXRWYWx1ZXMuZ2V0KCJw
ZXJtaXNzaW9uSWQiKSwgaW5wdXRMaXN0TWFwKSl7CgkJCQkJYWRkUm9sZVBlcm1pc3Npb24oaW5w
dXRWYWx1ZXMuZ2V0KCJwZXJtaXNzaW9uSWQiKSwgcm9sZUlkLCBmaW5hbFZhbHVlcyk7CgkJCQl9
IGVsc2UgaWYgKGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIikuZXF1YWxzKHJlYWRGZWF0dXJl
SWQpKSB7CgkJCQkJaWYoIWNoZWNrSWZDaGlsZHJlbkhhc1Blcm1pc3Npb24oaW5wdXRWYWx1ZXMu
Z2V0KCJtb2R1bGVJZCIpLCBpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpLCByb2xlSWQsIGlu
cHV0VmFsdWVzLmdldCgicGVybWlzc2lvbklkIiksIGlucHV0TGlzdE1hcCkpewoJCQkJCQlhZGRS
b2xlUGVybWlzc2lvbihpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpLCByb2xlSWQsIGZp
bmFsVmFsdWVzKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJY2hlY2tBbmREZWxldGVQYXJlbnRNb2R1
bGVzKGlucHV0TGlzdE1hcCwgaW5wdXRWYWx1ZXMsIGZlYXR1cmVJZCwgcmVhZEZlYXR1cmVJZCwg
cm9sZUlkLCBmaW5hbFZhbHVlcyk7CgkJfQoJfQp9CgovLyAqKioqIENoZWNrIGlmIGF0bGVhc3Qg
b25lIGNoaWxkcmVuIGhhcyBhIGdpdmVuIHBlcm1pc3Npb24sIHNvIHRoYXQgdGhlIHBlcm1pc3Np
b24gc2hvdWxkIG5vdCBiZSBkZWxldGVkIGluIHBhcmVudCAqKioqIC8vCnByaXZhdGUgc3RhdGlj
IEJvb2xlYW4gY2hlY2tJZkNoaWxkcmVuSGFzUGVybWlzc2lvbihTdHJpbmcgbW9kdWxlSWQsIFN0
cmluZyBmZWF0dXJlSWQsIFN0cmluZyByb2xlSWQsIFN0cmluZyBjdXJyZW50Q2hpbGRQZXJtaXNz
aW9uSWQsIExpc3Q8SGFzaE1hcDxTdHJpbmcsIFN0cmluZz4+IGlucHV0TGlzdE1hcCkgewoJQm9v
bGVhbiBoYXNQZXJtaXNzaW9uID0gZmFsc2U7Cglmb3IoSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4g
aW5wdXRWYWx1ZXM6IGlucHV0TGlzdE1hcCkgewoJCWlmKGlucHV0VmFsdWVzLmdldCgicGFyZW50
SWQiKS5lcXVhbHMobW9kdWxlSWQpICYmIGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIikuZXF1
YWxzKGZlYXR1cmVJZCkgJiYgCgkJCSBpbnB1dFZhbHVlcy5nZXQoInJvbGVJZCIpLmVxdWFscyhy
b2xlSWQpICYmICFpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpLmVxdWFscyhjdXJyZW50
Q2hpbGRQZXJtaXNzaW9uSWQpKSB7CgkJCWhhc1Blcm1pc3Npb24gPSB0cnVlOwoJCQlyZXR1cm4g
aGFzUGVybWlzc2lvbjsKCQl9Cgl9CglyZXR1cm4gaGFzUGVybWlzc2lvbjsKfQoKLy8gKioqKiBD
aGVja2luZyBDaGlsZCBNb2R1bGUgYW5kIHJlbW92aW5nIHNhbWUgZmVhdHVyZSBhbmQgUmVhZCBG
ZWF0dXJlIGFzd2VsbCAoSWYgZXhpc3RzKSAqKioqIC8vCnByaXZhdGUgc3RhdGljIHZvaWQgY2hl
Y2tBbmREZWxldGVDaGlsZE1vZHVsZXMoTGlzdDxIYXNoTWFwPFN0cmluZywgU3RyaW5nPj4gaW5w
dXRMaXN0TWFwLEhhc2hNYXA8U3RyaW5nLCBTdHJpbmc+IGN1cnJlbnRJbnB1dFZhbHVlcywKCQlT
dHJpbmcgZmVhdHVyZUlkLCBTdHJpbmcgcmVhZEZlYXR1cmVJZCwgU3RyaW5nIHJvbGVJZCwgQXJy
YXlMaXN0PElEYXRhPiBmaW5hbFZhbHVlcykgewoJZm9yKEhhc2hNYXA8U3RyaW5nLCBTdHJpbmc+
IGlucHV0VmFsdWVzOiBpbnB1dExpc3RNYXApIHsKCQlpZihpbnB1dFZhbHVlcy5nZXQoInBhcmVu
dElkIikuZXF1YWxzKGN1cnJlbnRJbnB1dFZhbHVlcy5nZXQoIm1vZHVsZUlkIikpKSB7CgkJCWlm
KCFjdXJyZW50SW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKS5lcXVhbHMocmVhZEZlYXR1cmVJ
ZCkpIHsKCQkJCWlmKGNoZWNrSWZSZWFkVG9CZURlbGV0ZWQoaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1
bGVJZCIpLCByZWFkRmVhdHVyZUlkLCBpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpLCBy
b2xlSWQsIGlucHV0TGlzdE1hcCkpIHsKCQkJCQlhZGRSb2xlUGVybWlzc2lvbihpbnB1dFZhbHVl
cy5nZXQoInBlcm1pc3Npb25JZCIpLCByb2xlSWQsIGZpbmFsVmFsdWVzKTsKCQkJCX0KCQkJfSBl
bHNlIGlmKGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIikuZXF1YWxzKGZlYXR1cmVJZCkpIHsK
CQkJCWFkZFJvbGVQZXJtaXNzaW9uKGlucHV0VmFsdWVzLmdldCgicGVybWlzc2lvbklkIiksIHJv
bGVJZCwgZmluYWxWYWx1ZXMpOwoJCQl9CgkJCWNoZWNrQW5kRGVsZXRlUGFyZW50TW9kdWxlcyhp
bnB1dExpc3RNYXAsIGlucHV0VmFsdWVzLCBmZWF0dXJlSWQsIHJlYWRGZWF0dXJlSWQsIHJvbGVJ
ZCwgZmluYWxWYWx1ZXMpOwoJCX0KCX0KfQoKLy8gPT09PT09PT0gSW5zZXJ0IFBlcm1pc3Npb24g
SmF2YSBTZXJ2aWNlIChVVElMUykgPT09PT09PT09PSAvLwoKLy8gKioqKiBGZXRjaGluZyBQYXJl
bnRzIG9mIHNwZWNpZmljIG1vZHVsZSBhbmQgYWRkaW5nIFJlYWQgZmVhdHVyZSAqKioqIC8vCnBy
aXZhdGUgc3RhdGljIHZvaWQgZ2V0UGFyZW50TW9kdWxlcyhMaXN0PEhhc2hNYXA8U3RyaW5nLCBT
dHJpbmc+PiBpbnB1dExpc3RNYXAsSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4gY3VycmVudElucHV0
VmFsdWVzLCBTdHJpbmcgaW5wdXRQZXJtaXNzaW9uSWQsIAoJCVN0cmluZyBmZWF0dXJlSWQsIFN0
cmluZyBtb2R1bGVJZCwgU3RyaW5nIHJlYWRGZWF0dXJlSWQsIFN0cmluZyByb2xlSWQsIEFycmF5
TGlzdDxJRGF0YT4gZmluYWxWYWx1ZXMpIHsKCWZvcihIYXNoTWFwPFN0cmluZywgU3RyaW5nPiBp
bnB1dFZhbHVlczogaW5wdXRMaXN0TWFwKSB7CgkJaWYoaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1bGVJ
ZCIpLmVxdWFscyhjdXJyZW50SW5wdXRWYWx1ZXMuZ2V0KCJwYXJlbnRJZCIpKSkgewoJCQlpZihp
bnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpLmVxdWFscyhyZWFkRmVhdHVyZUlkKSkgewoJCQkJ
YWRkUm9sZVBlcm1pc3Npb24oaW5wdXRWYWx1ZXMuZ2V0KCJwZXJtaXNzaW9uSWQiKSwgcm9sZUlk
LCBmaW5hbFZhbHVlcyk7CgkJCX0gZWxzZSAgaWYoaW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlSWQi
KS5lcXVhbHMoZmVhdHVyZUlkKSkgewoJCQkJYWRkUm9sZVBlcm1pc3Npb24oaW5wdXRWYWx1ZXMu
Z2V0KCJwZXJtaXNzaW9uSWQiKSwgcm9sZUlkLCBmaW5hbFZhbHVlcyk7CgkJCX0KCQkJZ2V0UGFy
ZW50TW9kdWxlcyhpbnB1dExpc3RNYXAsIGlucHV0VmFsdWVzLCBpbnB1dFBlcm1pc3Npb25JZCwg
ZmVhdHVyZUlkLCBtb2R1bGVJZCwgcmVhZEZlYXR1cmVJZCwgcm9sZUlkLCBmaW5hbFZhbHVlcyk7
CgkJfQoJfQp9CgovLyAqKioqIEZldGNoaW5nIENoaWxkcyBvZiBzcGVjaWZpYyBtb2R1bGUgYW5k
IGFkZGluZyBSZWFkIGZlYXR1cmUgJiBjdXJyZW50IE1vZHVsZSBmZWF0dXJlKElmIEV4aXN0KSAq
KioqIC8vCnByaXZhdGUgc3RhdGljIHZvaWQgZ2V0Q2hpbGRNb2R1bGVzKExpc3Q8SGFzaE1hcDxT
dHJpbmcsIFN0cmluZz4+IGlucHV0TGlzdE1hcCxIYXNoTWFwPFN0cmluZywgU3RyaW5nPiBjdXJy
ZW50SW5wdXRWYWx1ZXMsIFN0cmluZyBpbnB1dFBlcm1pc3Npb25JZCwgCgkJU3RyaW5nIGZlYXR1
cmVJZCwgU3RyaW5nIG1vZHVsZUlkLCBTdHJpbmcgcmVhZEZlYXR1cmVJZCwgU3RyaW5nIHJvbGVJ
ZCwgQXJyYXlMaXN0PElEYXRhPiBmaW5hbFZhbHVlcykgewoJZm9yKEhhc2hNYXA8U3RyaW5nLCBT
dHJpbmc+IGlucHV0VmFsdWVzOiBpbnB1dExpc3RNYXApIHsKLy8JCQlIYXNoTWFwPFN0cmluZywg
U3RyaW5nPiBpbnB1dFZhbHVlcyA9IGdldElucHV0VmFsdWVzKGVsKTsKCQlpZihpbnB1dFZhbHVl
cy5nZXQoInBhcmVudElkIikuZXF1YWxzKGN1cnJlbnRJbnB1dFZhbHVlcy5nZXQoIm1vZHVsZUlk
IikpKSB7CgkJCWlmKGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIikuZXF1YWxzKHJlYWRGZWF0
dXJlSWQpKSB7CgkJCQlhZGRSb2xlUGVybWlzc2lvbihpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Np
b25JZCIpLCByb2xlSWQsIGZpbmFsVmFsdWVzKTsKCQkJfSBlbHNlIGlmIChpbnB1dFZhbHVlcy5n
ZXQoImZlYXR1cmVJZCIpLmVxdWFscyhmZWF0dXJlSWQpKSB7CgkJCQlhZGRSb2xlUGVybWlzc2lv
bihpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpLCByb2xlSWQsIGZpbmFsVmFsdWVzKTsK
CQkJfSAKCQkJZ2V0Q2hpbGRNb2R1bGVzKGlucHV0TGlzdE1hcCwgaW5wdXRWYWx1ZXMsIGlucHV0
UGVybWlzc2lvbklkLCBmZWF0dXJlSWQsIG1vZHVsZUlkLCByZWFkRmVhdHVyZUlkLCByb2xlSWQs
IGZpbmFsVmFsdWVzKTsKCQl9Cgl9Cn0KCi8vICoqKiogQWRkaW5nIFBlcm1pc3Npb25JZCBhbmQg
cm9sZUlkIHRvIElEYXRhICoqKiogLy8KcHJpdmF0ZSBzdGF0aWMgdm9pZCBhZGRSb2xlUGVybWlz
c2lvbihTdHJpbmcgcGVybWlzc2lvbklkLCBTdHJpbmcgcm9sZUlkLCBBcnJheUxpc3Q8SURhdGE+
IGZpbmFsVmFsdWVzKSB7CglJRGF0YSBwZXJtaXNzaW9uID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgp
OwoJSURhdGFDdXJzb3IgcGVybWlzc2lvbkN1cnNvciA9IHBlcm1pc3Npb24uZ2V0Q3Vyc29yKCk7
CglJRGF0YVV0aWwucHV0KHBlcm1pc3Npb25DdXJzb3IsICJwZXJtaXNzaW9uSWQiLCBwZXJtaXNz
aW9uSWQpOwoJSURhdGFVdGlsLnB1dChwZXJtaXNzaW9uQ3Vyc29yLCAicm9sZUlkIiwgcm9sZUlk
KTsKCXBlcm1pc3Npb25DdXJzb3IuZGVzdHJveSgpOwoJZmluYWxWYWx1ZXMuYWRkKHBlcm1pc3Np
b24pOwp9Cgpwcml2YXRlIHN0YXRpYyBTdHJpbmcgZ2V0UGVybWlzc2lvbklkQnlNb2R1bGVBbmRG
ZWF0dXJlKFN0cmluZyBtb2R1bGVJZCwgU3RyaW5nIGZlYXR1cmVJZCwgTGlzdDxIYXNoTWFwPFN0
cmluZywgU3RyaW5nPj4gaW5wdXRMaXN0TWFwKSB7CglTdHJpbmcgcGVybWlzc2lvbklkID0gbnVs
bDsKCWZvcihIYXNoTWFwPFN0cmluZywgU3RyaW5nPiBpbnB1dFZhbHVlcyA6IGlucHV0TGlzdE1h
cCkgewoJCWlmKGlucHV0VmFsdWVzLmdldCgibW9kdWxlSWQiKS5lcXVhbHMobW9kdWxlSWQpICYm
IGlucHV0VmFsdWVzLmdldCgiZmVhdHVyZUlkIikuZXF1YWxzKGZlYXR1cmVJZCkpIHsKCQkJcGVy
bWlzc2lvbklkID0gaW5wdXRWYWx1ZXMuZ2V0KCJwZXJtaXNzaW9uSWQiKTsKCQl9Cgl9CglyZXR1
cm4gcGVybWlzc2lvbklkOwp9CgovLyA9PT09PT09PSBQcmVwYXJlIE1lbnUgSmF2YSBTZXJ2aWNl
IChVVElMUykgPT09PT09PT09PSAvLwoKcHJpdmF0ZSBzdGF0aWMgdm9pZCBnZXRDaGlsZE1vZHVs
ZShJRGF0YSBjdXJyZW50TW9kdWxlLCBMaXN0PEhhc2hNYXA8U3RyaW5nLCBTdHJpbmc+PiBpbnB1
dExpc3RNYXApIHsKCUlEYXRhQ3Vyc29yIGN1cnJlbnRNb2R1bGVDdXJzb3IgPSBjdXJyZW50TW9k
dWxlLmdldEN1cnNvcigpOwoJQXJyYXlMaXN0PElEYXRhPiBzdWJNb2R1bGVzID0gbmV3IEFycmF5
TGlzdDw+KCk7Cglmb3IoSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4gaW5wdXRWYWx1ZXM6IGlucHV0
TGlzdE1hcCkgewoJCVN0cmluZyBjdXJyZW50TW9kdWxlSWQgPSBJRGF0YVV0aWwuZ2V0U3RyaW5n
KGN1cnJlbnRNb2R1bGVDdXJzb3IsICJpZCIpOwoJCWlmKGlucHV0VmFsdWVzLmdldCgicGFyZW50
SWQiKS5lcXVhbHMoY3VycmVudE1vZHVsZUlkKSkgewoJCQlpZighY2hlY2tJc0V4aXN0KGlucHV0
VmFsdWVzLmdldCgibW9kdWxlSWQiKSwgc3ViTW9kdWxlcykpIHsKCQkJCUlEYXRhIG1vZHVsZUlE
YXRhID0gYWRkTW9kdWxlKGlucHV0VmFsdWVzKTsKCQkJCXN1Yk1vZHVsZXMuYWRkKG1vZHVsZUlE
YXRhKTsKCQkJCWdldENoaWxkTW9kdWxlKG1vZHVsZUlEYXRhLCBpbnB1dExpc3RNYXApOwoJCQkJ
YWRkRmVhdHVyZXNUb01vZHVsZShpbnB1dExpc3RNYXAsIG1vZHVsZUlEYXRhKTsKCQkJCWlmKGlu
cHV0VmFsdWVzLmdldCgiaXNQcm9maWxlSW5mb3JtYXRpb24iKSAhPSBudWxsICYmIGlucHV0VmFs
dWVzLmdldCgiaXNQcm9maWxlSW5mb3JtYXRpb24iKS5lcXVhbHMoInRydWUiKSkgewoJCQkJCWNo
ZWNrQW5kRGVsZXRlTW9kdWxlKHN1Yk1vZHVsZXMsIG1vZHVsZUlEYXRhKTsKCQkJCX0KCQkJfQoJ
CX0gCgl9CglJRGF0YVV0aWwucHV0KGN1cnJlbnRNb2R1bGVDdXJzb3IsICJzdWJNb2R1bGVzIiwg
Y29udmVydFRvSURhdGFBcnJheShzdWJNb2R1bGVzKSk7CgljdXJyZW50TW9kdWxlQ3Vyc29yLmRl
c3Ryb3koKTsKfQoJCgkvLyAqKioqIChVVElMKSBBZGRpbmcgRmVhdHVyZXMgdG8gbW9kdWxlICoq
KiogLy8KCXByaXZhdGUgc3RhdGljIHZvaWQgYWRkRmVhdHVyZXNUb01vZHVsZShMaXN0PEhhc2hN
YXA8U3RyaW5nLCBTdHJpbmc+PiBpbnB1dFZhbHVlc01hcCwgSURhdGEgbW9kdWxlKSB7CgkJSURh
dGFDdXJzb3IgbW9kdWxlQ3Vyc29yID0gbW9kdWxlLmdldEN1cnNvcigpOwoJCUFycmF5TGlzdDxJ
RGF0YT4gZmVhdHVyZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsKCQlmb3IoSGFzaE1hcDxTdHJpbmcs
IFN0cmluZz4gaW5wdXRWYWx1ZXM6IGlucHV0VmFsdWVzTWFwKSB7CgkJCVN0cmluZyBtb2R1bGVJ
ZCA9IElEYXRhVXRpbC5nZXRTdHJpbmcobW9kdWxlQ3Vyc29yLCAiaWQiKTsKCQkJaWYoaW5wdXRW
YWx1ZXMuZ2V0KCJtb2R1bGVJZCIpLmVxdWFscyhtb2R1bGVJZCkpIHsKCQkJCS8vICoqKiBBZGRp
bmcgRmVhdHVyZXMgZm9yIGlucHV0IFVzZXIgcm9sZXMgKEZvciBQZXJtaXNzaW9uKSAqKiogLy8K
CQkJCWlmKCFjaGVja0lzRXhpc3QoaW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlSWQiKSwgZmVhdHVy
ZXMpICYmIChpbnB1dFZhbHVlcy5nZXQoIm9ubHlDaGVja2VkIikgIT0gbnVsbCkgJiYgaW5wdXRW
YWx1ZXMuZ2V0KCJvbmx5Q2hlY2tlZCIpLmVxdWFscygidHJ1ZSIpKSB7CgkJCQkJQm9vbGVhbiBp
c1JvbGVNYXRjaGVkID0gY2hlY2tGZWF0dXJlRm9ySW5wdXRSb2xlKGlucHV0VmFsdWVzLmdldCgi
aW5wdXRSb2xlcyIpLCBpbnB1dFZhbHVlcy5nZXQoIm1vZHVsZUlkIiksIGlucHV0VmFsdWVzLmdl
dCgiZmVhdHVyZUlkIiksIGlucHV0VmFsdWVzTWFwKTsKCQkJCQlpZihpc1JvbGVNYXRjaGVkKSBm
ZWF0dXJlcy5hZGQoYWRkRmVhdHVyZShpbnB1dFZhbHVlcywgbnVsbCkpOwoJCQkJfQoJCQkJLy8g
KioqIEFkZGluZyBGZWF0dXJlcyBmb3IgdGhlIG1vZHVsZSAqKiogLy8KCQkJCWVsc2UgaWYoIWNo
ZWNrSXNFeGlzdChpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpLCBmZWF0dXJlcykpIHsKCQkJ
CQlpZihpbnB1dFZhbHVlcy5nZXQoImlucHV0Um9sZXMiKSAhPSBudWxsKSB7CgkJCQkJCUJvb2xl
YW4gaXNSb2xlTWF0Y2hlZCA9IGNoZWNrRmVhdHVyZUZvcklucHV0Um9sZShpbnB1dFZhbHVlcy5n
ZXQoImlucHV0Um9sZXMiKSwgaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1bGVJZCIpLCBpbnB1dFZhbHVl
cy5nZXQoImZlYXR1cmVJZCIpLCBpbnB1dFZhbHVlc01hcCk7CgkJCQkJCWlmKGlzUm9sZU1hdGNo
ZWQpIGZlYXR1cmVzLmFkZChhZGRGZWF0dXJlKGlucHV0VmFsdWVzLCAidHJ1ZSIpKTsKCQkJCQkJ
ZWxzZSBmZWF0dXJlcy5hZGQoYWRkRmVhdHVyZShpbnB1dFZhbHVlcywgImZhbHNlIikpOwoJCQkJ
CX0gZWxzZSB7CgkJCQkJCWZlYXR1cmVzLmFkZChhZGRGZWF0dXJlKGlucHV0VmFsdWVzLCBudWxs
KSk7CgkJCQkJfQoJCQkJfQoJCQl9IAoJCX0KCQlJRGF0YVV0aWwucHV0KG1vZHVsZUN1cnNvciwg
ImZlYXR1cmVzIiwgY29udmVydFRvSURhdGFBcnJheShmZWF0dXJlcykpOwoJCW1vZHVsZUN1cnNv
ci5kZXN0cm95KCk7Cgl9CgkKCXByaXZhdGUgc3RhdGljIExpc3Q8SGFzaE1hcDxTdHJpbmcsIFN0
cmluZz4+IGdldEFsbElucHV0VmFsdWVzKElEYXRhW10gaW5wdXRzKSB7CgkJTGlzdDxIYXNoTWFw
PFN0cmluZywgU3RyaW5nPj4gaW5wdXRWYWx1ZXMgPSBuZXcgQXJyYXlMaXN0PD4oKTsKCQlmb3Io
SURhdGEgaW5wdXQgOiBpbnB1dHMpIHsKCQkJSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4gaW5wdXRW
YWx1ZSA9IG5ldyBIYXNoTWFwPD4oKTsKCQkJSURhdGFDdXJzb3IgZWxlbWVudEN1cnNvciA9IGlu
cHV0LmdldEN1cnNvcigpOyAKCQkJaW5wdXRWYWx1ZS5wdXQoIm1vZHVsZUlkIiwgSURhdGFVdGls
LmdldFN0cmluZyhlbGVtZW50Q3Vyc29yLCAiTU9EVUxFX0lEIikpOwoJCQlpbnB1dFZhbHVlLnB1
dCgibW9kdWxlTmFtZSIsIElEYXRhVXRpbC5nZXRTdHJpbmcoZWxlbWVudEN1cnNvciwgIk1PRFVM
RV9OQU1FIikpOwoJCQlpbnB1dFZhbHVlLnB1dCgiaXNTZWN0aW9uIiwgSURhdGFVdGlsLmdldFN0
cmluZyhlbGVtZW50Q3Vyc29yLCAiSVNfU0VDVElPTiIpKTsKCQkJaW5wdXRWYWx1ZS5wdXQoInJv
dXRlVXJsIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50Q3Vyc29yLCAiUk9VVEVfVVJMIikp
OwoJCQlpbnB1dFZhbHVlLnB1dCgic3ZnIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50Q3Vy
c29yLCAiU1ZHIikpOwoJCQlpbnB1dFZhbHVlLnB1dCgiaWNvbiIsIElEYXRhVXRpbC5nZXRTdHJp
bmcoZWxlbWVudEN1cnNvciwgIklDT04iKSk7CgkJCWlucHV0VmFsdWUucHV0KCJtb2R1bGVPcmRl
ciIsIElEYXRhVXRpbC5nZXRTdHJpbmcoZWxlbWVudEN1cnNvciwgIk1PRFVMRV9PUkRFUiIpKTsK
CQkJaW5wdXRWYWx1ZS5wdXQoInBhcmVudElkIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVtZW50
Q3Vyc29yLCAiUEFSRU5UX0lEIikpOwoJCQlpbnB1dFZhbHVlLnB1dCgibW9kdWxlT3JkZXIiLCBJ
RGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1lbnRDdXJzb3IsICJNT0RVTEVfT1JERVIiKSk7CgkJCWlu
cHV0VmFsdWUucHV0KCJwZXJtaXNzaW9uSWQiLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1lbnRD
dXJzb3IsICJQRVJNSVNTSU9OX0lEIikpOwoJCQlpbnB1dFZhbHVlLnB1dCgiZmVhdHVyZU5hbWUi
LCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1lbnRDdXJzb3IsICJGRUFUVVJFX05BTUUiKSk7CgkJ
CWlucHV0VmFsdWUucHV0KCJmZWF0dXJlSWQiLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1lbnRD
dXJzb3IsICJGRUFUVVJFX0lEIikpOwoJCQlpbnB1dFZhbHVlLnB1dCgiZmVhdHVyZVR5cGUiLCBJ
RGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1lbnRDdXJzb3IsICJGRUFUVVJFX1RZUEUiKSk7CgkJCWlu
cHV0VmFsdWUucHV0KCJyb2xlUGVybWlzc2lvbklkIiwgSURhdGFVdGlsLmdldFN0cmluZyhlbGVt
ZW50Q3Vyc29yLCAiUk9MRV9QRVJNSVNTSU9OX0lEIikpOwoJCQlpbnB1dFZhbHVlLnB1dCgib25s
eUNoZWNrZWQiLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1lbnRDdXJzb3IsICJPTkxZX0NIRUNL
RUQiKSk7CgkJCWlucHV0VmFsdWUucHV0KCJpbnB1dFJvbGVzIiwgSURhdGFVdGlsLmdldFN0cmlu
ZyhlbGVtZW50Q3Vyc29yLCAiSU5QVVRfUk9MRVMiKSk7CgkJCWlucHV0VmFsdWUucHV0KCJyb2xl
SWQiLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGVsZW1lbnRDdXJzb3IsICJST0xFX0lEIikpOwoJCQlp
bnB1dFZhbHVlLnB1dCgiaXNQcm9maWxlSW5mb3JtYXRpb24iLCBJRGF0YVV0aWwuZ2V0U3RyaW5n
KGVsZW1lbnRDdXJzb3IsICJpc1Byb2ZpbGVJbmZvcm1hdGlvbiIpKTsKCQkJaW5wdXRWYWx1ZXMu
YWRkKGlucHV0VmFsdWUpOwoJCX0KCQlyZXR1cm4gaW5wdXRWYWx1ZXM7Cgl9CgkKCS8vICoqKiog
KFVUSUwpIEFkZGluZyBNb2R1bGUgaW50byBJRGF0YSAqKioqIC8vCglwcml2YXRlIHN0YXRpYyBJ
RGF0YSBhZGRNb2R1bGUoSGFzaE1hcDxTdHJpbmcsIFN0cmluZz4gaW5wdXRWYWx1ZXMpIHsKCQlJ
RGF0YSBtb2R1bGVJRGF0YSA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCQlJRGF0YUN1cnNvciBt
b2R1bGVDdXJzb3IgPSBtb2R1bGVJRGF0YS5nZXRDdXJzb3IoKTsKCQlJRGF0YVV0aWwucHV0KG1v
ZHVsZUN1cnNvciwgImlkIiwgaW5wdXRWYWx1ZXMuZ2V0KCJtb2R1bGVJZCIpKTsKCQlJRGF0YVV0
aWwucHV0KG1vZHVsZUN1cnNvciwgIm5hbWUiLCBpbnB1dFZhbHVlcy5nZXQoIm1vZHVsZU5hbWUi
KSk7CgkJSURhdGFVdGlsLnB1dChtb2R1bGVDdXJzb3IsICJwYXJlbnRJZCIsIGlucHV0VmFsdWVz
LmdldCgicGFyZW50SWQiKSk7CgkJSURhdGFVdGlsLnB1dChtb2R1bGVDdXJzb3IsICJpc1NlY3Rp
b24iLCBpbnB1dFZhbHVlcy5nZXQoImlzU2VjdGlvbiIpKTsKCQlJRGF0YVV0aWwucHV0KG1vZHVs
ZUN1cnNvciwgInJvdXRlVXJsIiwgaW5wdXRWYWx1ZXMuZ2V0KCJyb3V0ZVVybCIpKTsKCQlJRGF0
YVV0aWwucHV0KG1vZHVsZUN1cnNvciwgInN2ZyIsIGlucHV0VmFsdWVzLmdldCgic3ZnIikpOwoJ
CUlEYXRhVXRpbC5wdXQobW9kdWxlQ3Vyc29yLCAiaWNvbiIsIGlucHV0VmFsdWVzLmdldCgiaWNv
biIpKTsKCQlJRGF0YVV0aWwucHV0KG1vZHVsZUN1cnNvciwgIm9yZGVyIiwgaW5wdXRWYWx1ZXMu
Z2V0KCJtb2R1bGVPcmRlciIpKTsKCQltb2R1bGVDdXJzb3IuZGVzdHJveSgpOwoJCXJldHVybiBt
b2R1bGVJRGF0YTsKCX0KCQoJLy8gKioqKiAoVVRJTCkgQWRkaW5nIEZlYXR1cmUgaW50byBJRGF0
YSAqKioqIC8vCglwcml2YXRlIHN0YXRpYyBJRGF0YSBhZGRGZWF0dXJlKEhhc2hNYXA8U3RyaW5n
LCBTdHJpbmc+IGlucHV0VmFsdWVzLCBTdHJpbmcgaXNFbmFibGVkKSB7CgkJSURhdGEgZmVhdHVy
ZUlEYXRhID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwoJCUlEYXRhQ3Vyc29yIGZlYXR1cmVDdXJz
b3IgPSBmZWF0dXJlSURhdGEuZ2V0Q3Vyc29yKCk7CgkJSURhdGFVdGlsLnB1dChmZWF0dXJlQ3Vy
c29yLCAiaWQiLCBpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpKTsKCQlJRGF0YVV0aWwucHV0
KGZlYXR1cmVDdXJzb3IsICJuYW1lIiwgaW5wdXRWYWx1ZXMuZ2V0KCJmZWF0dXJlTmFtZSIpKTsK
CQlJRGF0YVV0aWwucHV0KGZlYXR1cmVDdXJzb3IsICJ0eXBlIiwgaW5wdXRWYWx1ZXMuZ2V0KCJm
ZWF0dXJlVHlwZSIpKTsKCQlJRGF0YVV0aWwucHV0KGZlYXR1cmVDdXJzb3IsICJwZXJtaXNzaW9u
SWQiLCBpbnB1dFZhbHVlcy5nZXQoInBlcm1pc3Npb25JZCIpKTsKCQlpZihpc0VuYWJsZWQgIT0g
bnVsbCkgewoJCQlJRGF0YVV0aWwucHV0KGZlYXR1cmVDdXJzb3IsICJpc0VuYWJsZWQiLCBpc0Vu
YWJsZWQpOwoJCX0KCQlmZWF0dXJlQ3Vyc29yLmRlc3Ryb3koKTsKCQlyZXR1cm4gZmVhdHVyZUlE
YXRhOwoJfQoJCgkvLyAqKioqIChVVElMKSBDb252ZXJ0aW5nIEFycmF5TGlzdCB0byBJRGF0YSBb
XSAqKioqIC8vCglwcml2YXRlIHN0YXRpYyBJRGF0YVtdIGNvbnZlcnRUb0lEYXRhQXJyYXkoQXJy
YXlMaXN0PElEYXRhPiBsaXN0KSB7CgkJSURhdGFbXSBvdXRwdXQgPSBuZXcgSURhdGFbbGlzdC5z
aXplKCldOwoJCWZvciAoaW50IGkgPSAwOyBpIDwgbGlzdC5zaXplKCk7IGkrKykKCQkJb3V0cHV0
W2ldID0gSURhdGFVdGlsLmNsb25lKGxpc3QuZ2V0KGkpKTsKCQlyZXR1cm4gb3V0cHV0OwoJfQoJ
CgkvLyAqKioqIChVVElMKSBDaGVja2luZyB0aGUgZHVwbGljYXRpb24gb2Ygb2JqZWN0IGluIGEg
Z2l2ZW4gbGlzdCAqKioqIC8vCglwcml2YXRlIHN0YXRpYyBCb29sZWFuIGNoZWNrSXNFeGlzdChT
dHJpbmcgaWQsIEFycmF5TGlzdDxJRGF0YT4gbGlzdCkgewoJCUxpc3Q8SURhdGE+IHJlc3VsdCA9
IGxpc3Quc3RyZWFtKCkuZmlsdGVyKGR1cCAtPiBJRGF0YVV0aWwuZ2V0U3RyaW5nKGR1cC5nZXRD
dXJzb3IoKSwgImlkIikuZXF1YWxzKGlkKSkuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKTsK
CQlpZihyZXN1bHQuaXNFbXB0eSgpKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJcmV0dXJuIHRy
dWU7Cgl9CgkKCXByaXZhdGUgc3RhdGljIEJvb2xlYW4gY2hlY2tGZWF0dXJlRm9ySW5wdXRSb2xl
KFN0cmluZyBpbnB1dFJvbGVzLCBTdHJpbmcgbW9kdWxlSWQsIFN0cmluZyBmZWF0dXJlSWQsIExp
c3Q8SGFzaE1hcDxTdHJpbmcsIFN0cmluZz4+IGlucHV0VmFsdWVzTWFwKSB7CgkJU3RyaW5nW10g
cm9sZXNMaXN0ID0gaW5wdXRSb2xlcy5zcGxpdCgiLCIpOwoJCUJvb2xlYW4gaXNGb3VuZCA9IGZh
bHNlOwoJCWZvcihTdHJpbmcgcm9sZSA6IHJvbGVzTGlzdCkgewoJCQlmb3IoSGFzaE1hcDxTdHJp
bmcsIFN0cmluZz4gaW5wdXRWYWx1ZXMgOiBpbnB1dFZhbHVlc01hcCkgewoJCQkJaWYoaW5wdXRW
YWx1ZXMuZ2V0KCJyb2xlSWQiKSAhPSBudWxsICYmIGlucHV0VmFsdWVzLmdldCgibW9kdWxlSWQi
KSAhPSBudWxsICYmIAoJCQkJCQlpbnB1dFZhbHVlcy5nZXQoImZlYXR1cmVJZCIpICE9IG51bGwg
JiYgaW5wdXRWYWx1ZXMuZ2V0KCJyb2xlSWQiKS5lcXVhbHMocm9sZSkgJiYgCgkJCQkJCWlucHV0
VmFsdWVzLmdldCgibW9kdWxlSWQiKS5lcXVhbHMobW9kdWxlSWQpICYmIGlucHV0VmFsdWVzLmdl
dCgiZmVhdHVyZUlkIikuZXF1YWxzKGZlYXR1cmVJZCkpIHsKCQkJCQlpc0ZvdW5kID0gdHJ1ZTsK
CQkJCQlyZXR1cm4gaXNGb3VuZDsKCQkJCX0KCQkJfQoJCX0KCQlyZXR1cm4gaXNGb3VuZDsKCX0K
CQoJcHJpdmF0ZSBzdGF0aWMgdm9pZCBjaGVja0FuZERlbGV0ZU1vZHVsZShBcnJheUxpc3Q8SURh
dGE+IGxpc3QsIElEYXRhIG9iaikgewoJCUlEYXRhQ3Vyc29yIGVsZW1lbnRDdXJzb3IgPSBvYmou
Z2V0Q3Vyc29yKCk7IAoJCUlEYXRhW10gZmVhdHVyZXMgPSBJRGF0YVV0aWwuZ2V0SURhdGFBcnJh
eShlbGVtZW50Q3Vyc29yLCAiZmVhdHVyZXMiKTsKCQlpZihmZWF0dXJlcy5sZW5ndGggPT0gMCkg
ewoJCQlsaXN0LnJlbW92ZShvYmopOwoJCX0KCX0KCQ==</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>java.util.ArrayList</value>
    <value>java.util.Collections</value>
    <value>java.util.HashMap</value>
    <value>java.util.LinkedHashMap</value>
    <value>java.util.List</value>
    <value>java.util.Map</value>
    <value>java.util.Map.Entry</value>
    <value>java.util.stream.Collectors</value>
  </array>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
</Values>
